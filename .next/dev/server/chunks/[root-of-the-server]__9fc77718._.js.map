{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/bns/Desktop/translateSRT/app/api/translate/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { promises as fs } from \"node:fs\";\nimport path from \"node:path\";\nimport os from \"node:os\";\nimport { spawn } from \"node:child_process\";\nimport crypto from \"node:crypto\";\n\nexport const runtime = \"nodejs\";\n\nfunction sanitizeName(name: string): string {\n  const base = path.basename(name);\n  const safe = base.replace(/[^a-zA-Z0-9._-]/g, \"_\");\n  return safe || \"input.srt\";\n}\n\nasync function saveTempFile(file: File): Promise<{ dir: string; inPath: string; outPath: string; baseName: string }> {\n  const arrayBuffer = await file.arrayBuffer();\n  const buffer = Buffer.from(arrayBuffer);\n  const tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), \"srt-\"));\n  const origName = file.name || \"input.srt\";\n  const safeName = sanitizeName(origName);\n  const baseName = path.parse(safeName).name;\n  const inPath = path.join(tmpDir, safeName);\n  await fs.writeFile(inPath, buffer);\n  // outPath is determined later once we know target code\n  return { dir: tmpDir, inPath, outPath: \"\", baseName };\n}\n\nfunction runPythonTranslate(cwd: string, env: NodeJS.ProcessEnv): Promise<{ code: number; stdout: string; stderr: string }>\n{ return new Promise((resolve) => {\n    const pyCmd = process.env.PYTHON_CMD || \"python3\";\n    const child = spawn(pyCmd, [\"run_deep.py\"], { cwd, env: { ...process.env, ...env } });\n    let stdout = \"\";\n    let stderr = \"\";\n    child.stdout.on(\"data\", (d) => { stdout += d.toString(); });\n    child.stderr.on(\"data\", (d) => { stderr += d.toString(); });\n    child.on(\"close\", (code) => resolve({ code: code ?? 0, stdout, stderr }));\n  });\n}\n\nfunction runPythonValidate(cwd: string, filePath: string): Promise<{ code: number; stdout: string; stderr: string }>\n{ return new Promise((resolve) => {\n    const pyCmd = process.env.PYTHON_CMD || \"python3\";\n    const child = spawn(pyCmd, [\"scripts/validate_srt.py\", filePath], { cwd });\n    let stdout = \"\";\n    let stderr = \"\";\n    child.stdout.on(\"data\", (d) => { stdout += d.toString(); });\n    child.stderr.on(\"data\", (d) => { stderr += d.toString(); });\n    child.on(\"close\", (code) => resolve({ code: code ?? 0, stdout, stderr }));\n  });\n}\n\n// ...crypto and runtime already imported above\n\ntype JobRecord = {\n  dir: string;\n  inPath: string;\n  baseName: string;\n  status: \"running\" | \"done\" | \"error\";\n  outPath?: string;\n  stderr?: string;\n};\n\nconst JOBS: Map<string, JobRecord> = new Map();\n\nexport async function POST(req: NextRequest) {\n  try {\n    const form = await req.formData();\n    const file = form.get(\"file\");\n    if (!(file instanceof File)) {\n      return new Response(JSON.stringify({ error: \"Missing SRT file\" }), { status: 400 });\n    }\n    // Enforce .srt extension\n    if (!/\\.srt$/i.test(file.name || \"\")) {\n      return new Response(JSON.stringify({ error: \"Only .srt files are supported\" }), { status: 400 });\n    }\n    const target = String(form.get(\"target\") || \"fr\").toLowerCase();\n    const source = String(form.get(\"source\") || \"auto\").toLowerCase();\n    const backend = (process.env.PY_BACKEND_URL || \"\").trim();\n\n    // If a remote Python backend is configured, proxy synchronously (existing behavior)\n    if (backend) {\n      const fd = new FormData();\n      fd.append(\"file\", file, file.name);\n      fd.append(\"target\", target);\n      fd.append(\"source\", source);\n      if (form.get(\"group_deep\")) fd.append(\"group_deep\", String(form.get(\"group_deep\")));\n      const base = backend.replace(/\\/$/, \"\");\n      // Preflight validate for faster feedback\n      try {\n        const v = await fetch(base + \"/validate\", { method: \"POST\", body: fd });\n        if (!v.ok) {\n          const t = (await v.text()) || \"Invalid SRT file\";\n          let msg = t;\n          const mArrow = t.match(/invalid timecode syntax at line (\\d+)/i);\n          const mMissing = t.match(/missing text after timecode at line (\\d+)/i);\n          if (mArrow) msg = `Invalid SRT at line ${mArrow[1]}: expected '-->' between timestamps.`;\n          else if (mMissing) msg = `Invalid SRT at line ${mMissing[1]}: missing subtitle text after timecode.`;\n          else if (/no valid timecode lines found/i.test(t)) msg = \"Invalid SRT: no valid timecode lines found.\";\n          else if (/timecodes out of order/i.test(t)) msg = \"Invalid SRT: timecodes appear out of order.\";\n          else if (/empty srt/i.test(t)) msg = \"Invalid SRT: file is empty.\";\n          return new Response(JSON.stringify({ error: msg }), { status: 400 });\n        }\n      } catch {}\n      const url = base + \"/translate\";\n      const resp = await fetch(url, { method: \"POST\", body: fd });\n      const ab = await resp.arrayBuffer();\n      // Pass-through headers we care about\n      const cd = resp.headers.get(\"content-disposition\") || `attachment; filename=\"output_${target}.srt\"`;\n      const cl = resp.headers.get(\"content-length\") || String(ab.byteLength || 0);\n      return new Response(ab, {\n        status: resp.status,\n        headers: {\n          \"Content-Type\": resp.headers.get(\"content-type\") || \"text/plain; charset=utf-8\",\n          \"Content-Disposition\": cd,\n          \"Content-Length\": cl,\n          \"Cache-Control\": \"no-store\",\n        },\n      });\n    }\n\n  const { dir, inPath, baseName } = await saveTempFile(file);\n    // Quick format sanity check: try to detect at least one timecode line\n    try {\n      const text = await fs.readFile(inPath, \"utf-8\");\n      const hasTimecode = /\\d{2}:\\d{2}:\\d{2},\\d{3}\\s+-->\\s+\\d{2}:\\d{2}:\\d{2},\\d{3}/.test(text);\n      if (!hasTimecode) {\n        return new Response(JSON.stringify({ error: \"Invalid SRT: timecode lines not found\" }), { status: 400 });\n      }\n    } catch {}\n    const translateDir = path.resolve(process.cwd(), \"translate\");\n\n  // Strong validation with pysrt before processing\n    try {\n      const v = await runPythonValidate(translateDir, inPath);\n      if (v.code !== 0) {\n        let msg = \"Invalid SRT file\";\n        try {\n          const j = JSON.parse(v.stdout || v.stderr || \"{}\");\n          if (j.error) {\n            const raw = String(j.error);\n            // Map to friendly messages\n            const mArrow = raw.match(/invalid timecode syntax at line (\\d+)/i);\n            const mMissing = raw.match(/missing text after timecode at line (\\d+)/i);\n            if (mArrow) msg = `Invalid SRT at line ${mArrow[1]}: expected '-->' between timestamps.`;\n            else if (mMissing) msg = `Invalid SRT at line ${mMissing[1]}: missing subtitle text after timecode.`;\n            else if (/no valid timecode lines found/i.test(raw)) msg = \"Invalid SRT: no valid timecode lines found.\";\n            else if (/timecodes out of order/i.test(raw)) msg = \"Invalid SRT: timecodes appear out of order.\";\n            else if (/empty srt/i.test(raw)) msg = \"Invalid SRT: file is empty.\";\n            else msg = `Invalid SRT: ${raw}`;\n          }\n        } catch {}\n        return new Response(JSON.stringify({ error: msg }), { status: 400 });\n      }\n    } catch {}\n\n    const env: any = {\n      INPUT_SRT: inPath,\n      TARGET_LANG: target,\n      SOURCE_LANG: source,\n      OFFER_DOWNLOAD: \"0\",\n      AUTO_DOWNLOAD: \"0\",\n      TRANSLATE_CACHE_PATH: path.join(dir, \".translate_cache.sqlite\"),\n      GROUP_DEEP: String(form.get(\"group_deep\") ?? \"1\"),\n    } as unknown as NodeJS.ProcessEnv;\n\n    // If the client wants progress updates, create a PROGRESS_PATH inside the temp dir\n    const progressPath = path.join(dir, \"progress.json\");\n    env.PROGRESS_PATH = progressPath;\n\n    // Always-on fast mode: speed + context by grouping more lines safely\n    env.FAST_MODE = \"1\";\n    env.USE_DOMINANT_FOR_GROUP = env.USE_DOMINANT_FOR_GROUP || \"1\";\n    env.ALLOW_GROUP_AUTO = env.ALLOW_GROUP_AUTO || \"1\";\n    // Defaults tuned for good quality and speed; can be overridden by server env if needed\n    env.GROUP_MAX_CHARS = env.GROUP_MAX_CHARS || \"2200\";\n    env.GROUP_MAX_BLOCKS = env.GROUP_MAX_BLOCKS || \"12\";\n    env.GROUP_MAX_GAP_MS = env.GROUP_MAX_GAP_MS || \"3000\";\n    env.CACHE_GROUP_THRESHOLD = env.CACHE_GROUP_THRESHOLD || \"0.4\";\n    env.TRANSLATE_CONCURRENCY = env.TRANSLATE_CONCURRENCY || \"6\";\n\n    // Start a background job and return a job id so the frontend can poll progress.\n    const jobId = crypto.randomUUID();\n    JOBS.set(jobId, { dir, inPath, baseName, status: \"running\" });\n\n    // Spawn the translator in background\n    const { code, stdout, stderr } = await (async () => {\n      // Use spawn like runPythonTranslate but don't block the event loop while waiting to update JOBS on completion\n      const child = spawn(env.PYTHON_CMD || \"python3\", [\"run_deep.py\"], { cwd: translateDir, env: { ...process.env, ...env } });\n      let out = \"\";\n      let err = \"\";\n      child.stdout.on(\"data\", (d) => { out += d.toString(); });\n      child.stderr.on(\"data\", (d) => { err += d.toString(); });\n      child.on(\"close\", (c) => {\n        const outPath = path.join(path.dirname(inPath), `${baseName}_${target}.srt`);\n        const rec = JOBS.get(jobId);\n        if (rec) {\n          rec.status = c === 0 ? \"done\" : \"error\";\n          rec.outPath = outPath;\n          rec.stderr = err;\n          JOBS.set(jobId, rec);\n        }\n      });\n      // Return a small wrapper promise that resolves immediately (we don't wait here)\n      return { code: 0, stdout: \"\", stderr: \"\" };\n    })();\n\n    return new Response(JSON.stringify({ jobId }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n  } catch (err: any) {\n    console.error(\"Unexpected error in /api/translate\", err);\n    return new Response(JSON.stringify({ error: \"Server error\", details: String(err?.message || err) }), { status: 500 });\n  }\n}\n\n// Status endpoint: GET /api/translate/status?job=JOBID\nexport async function GET(req: NextRequest) {\n  const url = new URL(req.url);\n  const job = url.searchParams.get(\"job\");\n  const action = url.searchParams.get(\"action\") || \"status\";\n  if (!job) return new Response(JSON.stringify({ error: \"missing job id\" }), { status: 400 });\n  const rec = JOBS.get(job);\n  if (!rec) return new Response(JSON.stringify({ error: \"unknown job\" }), { status: 404 });\n\n  // If client asked for download\n  if (action === \"download\") {\n    if (rec.status !== \"done\" || !rec.outPath) return new Response(JSON.stringify({ error: \"not ready\" }), { status: 404 });\n    try {\n      const data = await fs.readFile(rec.outPath);\n      return new Response(data, { status: 200, headers: {\n        \"Content-Type\": \"text/plain; charset=utf-8\",\n        \"Content-Disposition\": `attachment; filename=\"${path.basename(rec.outPath)}\"`,\n        \"Content-Length\": String(data.byteLength || 0),\n      }});\n    } catch (e: any) {\n      return new Response(JSON.stringify({ error: \"file not found\", details: String(e) }), { status: 500 });\n    }\n  }\n\n  // Default: return status and any progress info from progress.json\n  let progress = null;\n  try {\n    const progRaw = await fs.readFile(path.join(rec.dir, \"progress.json\"), \"utf-8\");\n    progress = JSON.parse(progRaw);\n  } catch {}\n\n  return new Response(JSON.stringify({ status: rec.status, progress }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}